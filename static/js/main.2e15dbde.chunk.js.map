{"version":3,"sources":["components/habit.jsx","components/habitAddForm.jsx","components/habits.jsx","components/navbar.jsx","app.jsx","index.js"],"names":["Habit","handleIncrement","props","onIncrement","habit","handleDecrement","onDecrement","handleDelete","onDelete","console","log","this","name","count","className","onClick","PureComponent","HabitAddForm","memo","inputRef","React","createRef","onSubmit","event","preventDefault","current","value","onAdd","ref","type","placeholder","Habits","handleAdd","handleReset","onReset","habits","map","id","Component","Navbar","totalCount","App","state","item","setState","index","indexOf","splice","Date","now","filter","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e15dbde.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\n\nclass Habit extends PureComponent {\n\n    componentDidMount(){\n      console.log(`habit : ${this.props.habit.name} mounted`);\n    }\n\n    componentWillUnmount(){\n      console.log(`habit : ${this.props.habit.name} will unmount`);\n    }\n\n  //********************************************************\n  // 부모 component로부터 전달받은 props로 전달받은 habit의 데이터를\n  // 보여주기만 하는 component이기 때문에 이 component는 자체적으로 state를\n  // 갖고 있을 필요가 전혀 없음!\n  //********************************************************\n  // state = {\n  //   count: 0,\n  // };\n\n  handleIncrement = () =>{\n    this.props.onIncrement(this.props.habit);\n  }\n\n  handleDecrement = () =>{  \n    this.props.onDecrement(this.props.habit);\n  }\n\n  handleDelete = () =>{\n    this.props.onDelete(this.props.habit);\n  }\n\n  render() {\n    const {name, count} = this.props.habit;\n    return (\n      <li className=\"habit\">\n        <span className=\"habit-name\">{name}</span>\n        <span className=\"habit-count\">{count}</span>\n        <button className=\"habit-button habit-increase\" onClick={this.handleIncrement}>\n          <i className=\"fas fa-plus-square\"></i>\n        </button>\n        <button className=\"habit-button habit-decrease\" onClick={this.handleDecrement}>\n          <i className=\"fas fa-minus-square\"></i>\n        </button>\n        <button className=\"habit-button habit-delete\" onClick={this.handleDelete}>\n          <i className=\"fas fa-trash\"></i>\n        </button>\n      </li>\n      \n    );\n  }\n}\n\nexport default Habit;","//function component쓸 때 'rsi' + tab키\nimport React, { memo } from 'react';\n\nconst HabitAddForm = memo((props) => {\n  const inputRef = React.createRef();\n\n  const onSubmit = (event) =>{\n   \n    event.preventDefault(); //기본적으로 submit이 발생하면 page가 refresh되거나 다른 page로 가는 걸 예상하고 있기 때문.\n    const name = inputRef.current.value;\n    name && props.onAdd(name);\n    inputRef.current.value = '';\n  };\n  return (\n     <form className=\"add-form\" onSubmit={onSubmit}>\n       <input ref = {inputRef}\n         type=\"text\"\n         className=\"add-input\"\n         placeholder=\"Habit\"\n       />\n       {/* form에서는 button이 눌리면 submit이라는 event가 발생한다! */}\n       <button className=\"add-btn\">Add</button>  \n     </form>\n   );\n  }\n);\nexport default HabitAddForm;\n\n\n\n// 클래스 component 방식.\n// import React, { PureComponent } from 'react';\n// class HabitAddForm extends PureComponent {\n//   inputRef = React.createRef();\n\n//   onSubmit = (event) =>{\n//     //기본적으로 submit이 발생하면 page가 refresh되거나 다른 page로 가는 걸 예상하고 있기 때문.\n//     event.preventDefault();\n//     const name = this.inputRef.current.value;\n//     name && this.props.onAdd(name);\n//     this.inputRef.current.value = '';\n//   }\n\n//   render() {\n//     return (\n//       <form className=\"add-form\" onSubmit={this.onSubmit}>\n//         <input ref = {this.inputRef}\n//           type=\"text\"\n//           className=\"add-input\"\n//           placeholder=\"Habit\"\n//         />\n//         {/* form에서는 button이 눌리면 submit이라는 event가 발생한다! */}\n//         <button className=\"add-btn\">Add</button>  \n//       </form>\n//     );\n//   }\n// }\n\n// export default HabitAddForm;\n\n","import React, { Component } from 'react';\nimport Habit from './habit';\nimport HabitAddForm from './habitAddForm';\n\nclass Habits extends Component {\n  // state = {\n  //   habits : [\n  //     {id : 1, name : 'Reading', count: 0},\n  //     {id : 2, name : 'Running', count: 0},\n  //     {id : 3, name : 'Coding', count: 0},\n  //   ],\n  // };\n\n  handleIncrement = (habit) =>{\n   this.props.onIncrement(habit);\n  }\n\n  handleDecrement = (habit) =>{  \n    this.props.onDecrement(habit);\n\n  }\n\n  handleDelete = (habit) =>{\n    this.props.onDelete(habit);\n\n  }\n\n  handleAdd = (name) =>{\n    this.props.onAdd(name);\n  }\n\n  handleReset = ()=>{\n    this.props.onReset();\n  }\n\n  render() {\n    return (\n      <div>\n      <HabitAddForm\n        onAdd={this.handleAdd}\n      />\n      <ul>\n        {this.props.habits.map(habit => \n          <Habit          //Habit Component안에 key, habit, onIncrement,,,등의 'object'를 전달해줌.\n            key={habit.id} \n            habit={habit} \n            onIncrement={this.handleIncrement}\n            onDecrement={this.handleDecrement}\n            onDelete={this.handleDelete}\n          /> //props 사용!\n        )}\n      </ul>\n      <button className=\"reset-btn\" onClick={this.handleReset}>Reset All</button>\n    </div>\n    );\n  }\n}\n\nexport default Habits;\n\n","import React, { PureComponent } from 'react';\n\nclass Navbar extends PureComponent {\n  render() {\n    return (\n      <>\n      <nav className=\"navbar\">\n        <i className=\"navbar-logo fas fa-leaf\"></i>\n        <span>Habit Tracker</span>\n        <span className=\"navbar-count\">{this.props.totalCount}</span>\n      </nav>\n      </>\n    );\n  }\n}\n\nexport default Navbar;\n\n\n{/* \n  <div className=\"navbar\">\n<span className=\"logo\">\n  <i class=\"fas fa-leaf\"></i>\n</span>\n<span className=\"app-name\">\n  Habit Tracker\n</span>\n<span className=\"habit-count-total\">\n  0\n</span>\n</div>\n<div className=\"habit__input\">\n<input type=\"text\" className=\"input__area\" placeholder=\"Habit\"/>\n<button className=\"add__btn\">Add</button>\n</div> \n*/}","import './app.css';\nimport Habits from './components/habits';\nimport React, { Component } from 'react';\nimport Navbar from './components/navbar';\nimport HabitAddForm from './components/habitAddForm';\n\nclass App extends Component {\n  state = {\n    habits : [\n      {id : 1, name : 'Readings', count: 0},\n      {id : 2, name : 'Running', count: 0},\n      {id : 3, name : 'Coding', count: 0},\n    ],\n    totalCount : 0,\n  };\n\n\n  handleIncrement = (habit) =>{\n    //새로운 array를 만들고 기존 state의 habits안에 값들을 복사해옴 Spread operator(...)을 이용해서\n    //이때 새로운 habits와 기존habits array안에있는 object는 동일한 Object이다!\n    // const habits = [...this.state.habits];  \n    // const index = habits.indexOf(habit);\n    // habits[index].count++;\n    // this.setState({totalCount: this.state.totalCount + 1});\n    \n    //위와 같은 결과이지만, habit을 PureCompoenet로 바꿔준 뒤, 이렇게 해야 +버튼을 눌렀을때 habit이 re-rendering이 일어난다.\n    //기존꺼는 habit안의 data를 변경해줄 뿐, reference는 차이가 없기때문에 PureComponent인 Habit은 re-rendering이 발생하지않음!\n    //하지만 아래와 같이 새로 object를 copy해서 만들어 줌으로써 Habit에 re-render가 일어나게 됨!\n    const habits = this.state.habits.map(item => {\n      if(item.id === habit.id){\n        return {...habit, count : habit.count + 1}; //id가 동일하다면 새로운 habit을 return함. count는 1 증가시키고 ...('deconstructing object')\n      }\n      return item;\n    });\n    \n    this.setState({habits: habits});  //key : value(local variable habits)\n    //위와 같이 key, value가 동일하면 하나로 생략 가능 -> this.setState(habits);\n\n  };\n\n  handleDecrement = (habit) =>{  \n    // const habits = [...this.state.habits];  \n    // const index = habits.indexOf(habit);\n    // const count = habits[index].count - 1;\n    // habits[index].count = (count > 0 ? count : 0);\n\n    const habits = this.state.habits.map(item => {\n      if(item.id === habit.id){\n        const count = habit.count - 1;\n        return {...habit, count : count < 0 ? 0: count}; //id가 동일하다면 새로운 habit을 return함. count는 1 증가시키고 ...('deconstructing object')\n      }\n      return item;\n    });\n\n\n    this.setState({habits: habits});\n    \n  }\n\n  handleDelete = (habit) =>{\n    const habits = [...this.state.habits];  \n    const index = habits.indexOf(habit);\n    habits.splice(index, 1);\n    this.setState({habits: habits});  \n  }\n\n\n  handleAdd = (name) =>{\n    const habits = [...this.state.habits, {id: Date.now(), name: name, count: 0}];\n    this.setState({habits});\n  }\n\n  handleReset = ()=>{\n    // const habits = [...this.state.habits];\n    // habits.map(habit => {\n    //   habit.count = 0\n    //   return habit;\n    // })\n\n    const habits = this.state.habits.map(habit => {\n      if(habit.count !== 0){\n        return {...habit, count : 0};\n      }else{\n        return habit;\n      }\n    });\n\n\n    this.setState({habits});\n  }\n\n\n  render() {\n    return (\n      <div>\n        <Navbar totalCount={this.state.habits.filter(item => item.count > 0).length}/>\n        <Habits \n          habits={this.state.habits} \n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.handleDelete}\n          onAdd={this.handleAdd}\n          onReset={this.handleReset}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport '@fortawesome/fontawesome-free/js/all.js';\nimport SimpleHabit from './components/simpleHabit';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    {/* <SimpleHabit /> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}